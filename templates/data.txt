from fastapi import (
    FastAPI, WebSocket, WebSocketDisconnect,
    Request
)
from typing import List

from fastapi.templating import Jinja2Templates

from pydantic import BaseModel
from starlette.responses import Response

app = FastAPI()


# manager
class SocketManager:
    def __init__(self):
        self.active_connections: List[(WebSocket, str)] = []

    async def connect(self, websocket: WebSocket, user: str):
        await websocket.accept()
        self.active_connections.append((websocket, user))

    def disconnect(self, websocket: WebSocket, user: str):
        self.active_connections.remove((websocket, user))

    async def broadcast(self, data):
        for connection in self.active_connections:
            await connection[0].send_json(data)


manager = SocketManager()


@app.websocket("/api/chat")
async def chat(websocket: WebSocket):
    sender = websocket.cookies.get("X-Authorization")
    if sender:
        await manager.connect(websocket, sender)
        response = {
            "sender": sender,
            "message": "got connected"
        }
        await manager.broadcast(response)
        try:
            while True:
                data = await websocket.receive_json()
                await manager.broadcast(data)
        except WebSocketDisconnect:
            manager.disconnect(websocket, sender)
            response['message'] = "left"
            await manager.broadcast(response)


@app.get("/api/current_user")
def get_user(request: Request):
    return request.cookies.get("X-Authorization")


class RegisterValidator(BaseModel):
    username: str


@app.post("/api/register")
def register_user(user: RegisterValidator, response):
    print(user)
    print(response)
    response.set_cookie(key="X-Authorization", value=user.username, httponly=True)


# locate templates
templates = Jinja2Templates(directory="templates")


@app.get("/")
def get_home(request: Request):
    return templates.TemplateResponse("home.html", {"request": request})


@app.get("/chat")
def get_chat(request: Request):
    return templates.TemplateResponse("chat.html", {"request": request})



import asyncio

import discord
from discord.ext import commands
from fastapi import FastAPI

app = FastAPI()

bot = commands.Bot(command_prefix='!')


@app.get("/")
async def root():
    return {"message": "Hello World"}


@bot.event
async def on_ready():
    print('Logged in as')
    print(bot.user.name)
    print(bot.user.id)
    print('------')
    print(bot.user)
    print('------')


@bot.command()
async def welcome(ctx: commands.Context, member: discord.Member):
    await ctx.send('Welcome to the server!')
    await ctx.send(
        f'Welcome to the server, {member.mention}! and {ctx.author.mention}! \n {ctx.guild.name}'
    )


# bot.run('token')
async def run():
    try:
        await bot.start('0afdf1cf97468d5b37639127bf263c5b3be1cf776c18fee2995b11d836810fca')
    except KeyboardInterrupt:
        # await bot.logout()
        await bot.close()


asyncio.create_task(run())
